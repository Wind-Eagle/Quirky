#ifndef QUIRKY_SRC_EVAL_PSQ_H
#define QUIRKY_SRC_EVAL_PSQ_H

#include <array>

#include "../core/board/board.h"
#include "../core/util.h"
#include "score.h"

namespace q_eval {

inline constexpr uint16_t PSQ_SIZE = q_core::BOARD_SIZE * q_core::NUMBER_OF_CELLS;

inline constexpr uint16_t GetPSQIndex(const q_core::cell_t cell, q_core::coord_t src) {
    return cell * q_core::BOARD_SIZE + src;
}

inline constexpr std::array<ScorePair, PSQ_SIZE> GetPSQ(
    const std::array<ScorePair, q_core::BOARD_SIZE * q_core::NUMBER_OF_PIECES>& psq) {
    std::array<ScorePair, PSQ_SIZE> res{};
    for (q_core::cell_t cell = 0; cell < q_core::NUMBER_OF_CELLS; cell++) {
        for (q_core::coord_t coord = 0; coord < q_core::BOARD_SIZE; coord++) {
            if (cell == q_core::EMPTY_CELL) {
                continue;
            }
            q_core::Piece piece = q_core::GetCellPiece(cell);
            ScorePair cur_value =
                psq[(static_cast<size_t>(piece) - 1) * q_core::BOARD_SIZE + coord];
            if (q_core::GetCellColor(cell) == q_core::Color::White) {
                res[GetPSQIndex(cell, coord)] = cur_value;
            } else {
                res[GetPSQIndex(cell, q_core::FlipCoord(coord))] = cur_value;
            }
        }
    }
    return res;
}

static inline constexpr std::array<ScorePair, PSQ_SIZE> PSQ = GetPSQ({
    (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),
    (0, 0),     (0, 0),     (0, 0),     (-17, 0),   (-23, 0),   (10, 0),    (0, 0),     (0, 0),
    (-5, 0),    (-7, 0),    (0, 0),     (5, 0),     (10, 0),    (0, 0),     (-7, 0),    (-5, 0),
    (3, 0),     (3, 0),     (11, 0),    (16, 0),    (22, 0),    (9, 0),     (3, 0),     (3, 0),
    (16, 25),   (9, 25),    (17, 25),   (26, 25),   (32, 25),   (16, 25),   (11, 25),   (18, 25),
    (32, 60),   (14, 60),   (36, 60),   (49, 60),   (52, 60),   (37, 60),   (26, 60),   (41, 60),
    (98, 100),  (97, 100),  (99, 100),  (100, 100), (100, 100), (99, 100),  (97, 100),  (98, 100),
    (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),
    (-73, -73), (-37, -37), (-16, -16), (-4, -4),   (-3, -3),   (-12, -12), (-38, -38), (-85, -85),
    (-31, -31), (-12, -12), (0, 0),     (6, 6),     (7, 7),     (0, 0),     (-11, -11), (-33, -33),
    (-17, -17), (-3, -3),   (11, 11),   (16, 16),   (17, 17),   (12, 12),   (-3, -3),   (-16, -16),
    (-7, -7),   (10, 10),   (22, 22),   (31, 31),   (35, 35),   (21, 21),   (11, 11),   (-5, -5),
    (-7, -7),   (10, 10),   (22, 22),   (35, 35),   (38, 38),   (26, 26),   (18, 18),   (2, 2),
    (-17, -17), (-3, -3),   (11, 11),   (16, 16),   (27, 27),   (22, 22),   (15, 15),   (7, 7),
    (-31, -31), (-12, -12), (0, 0),     (11, 11),   (12, 12),   (5, 5),     (0, 0),     (-33, -33),
    (-85, -85), (-37, -37), (-16, -16), (-4, -4),   (-3, -3),   (-12, -12), (-38, -38), (-73, -73),
    (0, 0),     (-20, -10), (-10, -5),  (-10, -5),  (-10, -5),  (-10, -5),  (-20, -10), (0, 0),
    (-10, -5),  (15, 10),   (5, 0),     (10, 5),    (10, 5),    (5, 0),     (15, 10),   (-10, -5),
    (0, 0),     (15, 7),    (30, 15),   (20, 10),   (20, 10),   (30, 15),   (15, 7),    (0, 0),
    (7, 7),     (19, 12),   (40, 20),   (36, 18),   (36, 18),   (40, 20),   (19, 12),   (7, 7),
    (7, 7),     (19, 12),   (40, 20),   (36, 18),   (36, 18),   (40, 20),   (19, 12),   (7, 7),
    (0, 0),     (15, 7),    (30, 15),   (20, 10),   (20, 10),   (30, 15),   (15, 7),    (0, 0),
    (-10, -5),  (15, 10),   (5, 0),     (10, 5),    (10, 5),    (5, 0),     (15, 10),   (-10, -5),
    (0, 0),     (-20, -10), (-10, -5),  (-10, -5),  (-10, -5),  (-10, -5),  (-20, -10), (0, 0),
    (0, 0),     (0, 0),     (0, 0),     (20, 10),   (20, 10),   (0, 0),     (0, 0),     (0, 0),
    (0, 0),     (0, 0),     (0, 0),     (20, 10),   (20, 10),   (0, 0),     (0, 0),     (0, 0),
    (0, 0),     (0, 0),     (0, 0),     (20, 10),   (20, 10),   (0, 0),     (0, 0),     (0, 0),
    (0, 0),     (0, 0),     (0, 0),     (20, 10),   (20, 10),   (0, 0),     (0, 0),     (0, 0),
    (14, 7),    (14, 7),    (14, 7),    (20, 10),   (20, 10),   (13, 7),    (14, 7),    (15, 7),
    (21, 10),   (21, 10),   (21, 10),   (21, 10),   (21, 10),   (27, 10),   (28, 10),   (29, 10),
    (55, 25),   (55, 25),   (55, 25),   (55, 25),   (55, 25),   (55, 25),   (65, 25),   (75, 25),
    (40, 15),   (40, 15),   (40, 15),   (40, 15),   (40, 15),   (40, 15),   (40, 15),   (40, 15),
    (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),
    (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),
    (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),
    (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),
    (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),
    (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),
    (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),
    (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),     (0, 0),
    (0, -25),   (15, -20),  (-15, -10), (-50, 0),   (-50, 0),   (-15, -10), (15, -20),  (0, -25),
    (-5, 0),    (-15, 5),   (-25, 10),  (-75, 15),  (-75, 15),  (-25, 10),  (-15, 5),   (-5, 0),
    (-100, 5),  (-100, 10), (-100, 17), (-100, 25), (-100, 25), (-100, 17), (-100, 10), (-100, 5),
    (-100, 10), (-100, 20), (-100, 31), (-100, 41), (-100, 41), (-100, 31), (-100, 20), (-100, 10),
    (-100, 10), (-100, 20), (-100, 31), (-100, 41), (-100, 41), (-100, 31), (-100, 20), (-100, 10),
    (-100, 15), (-100, 25), (-100, 37), (-100, 45), (-100, 45), (-100, 37), (-100, 25), (-100, 15),
    (-100, 20), (-100, 25), (-100, 40), (-100, 50), (-100, 50), (-100, 40), (-100, 25), (-100, 20),
    (-100, 5),  (-100, 10), (-100, 17), (-100, 25), (-100, 25), (-100, 17), (-100, 10), (-100, 5),
});

inline constexpr q_core::coord_t GetCoordFromPSQIndex(uint16_t index) {
    return index % q_core::BOARD_SIZE;
}

inline constexpr q_core::cell_t GetCellFromPSQIndex(uint16_t index) {
    return index / q_core::BOARD_SIZE;
}

inline constexpr ScorePair GetPSQValue(const q_core::cell_t cell, q_core::coord_t src) {
    return PSQ[GetPSQIndex(cell, src)];
}

}  // namespace q_eval

#endif  // QUIRKY_SRC_EVAL_PSQ_H
